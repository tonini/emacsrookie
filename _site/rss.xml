<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">

<!-- RSS as a "standard" is terrible; use Atom.  -coyled -->
<!-- http://coyled.com/atom.xml -->

  <channel>
    <title>emacsrookie.com</title>
    <link>http://emacsrookie.com/</link>
    <atom:link href="http://emacsrookie.com/rss.xml" rel="self" type="application/rss+xml" />
    <description>Hints about the powerful emacs text editor</description>
    <language>en-us</language>
    <pubDate>Mon, 10 Oct 2011 08:30:43 CEST</pubDate>
    <lastBuildDate>Mon, 10 Oct 2011 08:30:43 CEST</lastBuildDate>

    
    <item>
      <title>Enter The Dired Dungeon</title>
      <link>http://emacsrookie.com/2011/10/10/enter-the-dired-dungeon/</link>
      <pubDate>Mon, 10 Oct 2011 00:00:00 CEST</pubDate>
      <author>tonini.samuel@gmail.com (Samuel Tonini)</author>
      <guid>http://emacsrookie.com/2011/10/10/enter-the-dired-dungeon</guid>
      <description>&lt;p&gt;Often when I talk with people about Emacs, they mostly complain about
the missing project navigator.&lt;/p&gt;

&lt;p&gt;Dired have a lot to offer that doesn&amp;rsquo;t suite in just one article, so
I decide to split it in several parts. I start with showing the
navigation abilities of Dired.&lt;/p&gt;

&lt;p&gt;Through the article I won&amp;rsquo;t refer to keybindings but instead to the
function names. At the end there will be a list of the functions
inclusive the corresponding default keybindings.&lt;/p&gt;

&lt;h3&gt;How to use it straightforward?&lt;/h3&gt;

&lt;p&gt;Dired is built in Emacs, so you don&amp;rsquo;t have to install anything.&lt;/p&gt;

&lt;p&gt;Enter Dired with use the function &lt;code&gt;dired&lt;/code&gt;. Now it&amp;rsquo;s opening the
minibuffer and prompts you to choose a directory to open.&lt;/p&gt;

&lt;p&gt;Example of a open Dired buffer:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;  /Users/samuel/Projects/basement:
  total used in directory 48 available 151364824
  drwxr-xr-x  10 samuel  staff   340 24 Aug 16:16 .
  drwxr-xr-x  37 samuel  staff  1258  5 Okt 13:54 ..
  drwxr-xr-x  12 samuel  staff   408  5 Okt 22:29 .git
  -rw-r--r--   1 samuel  staff    33 24 Aug 15:55 .gitignore
  -rw-r--r--   1 samuel  staff    92 24 Aug 15:55 Gemfile
  -rw-r--r--   1 samuel  staff   194 24 Aug 16:16 Gemfile.lock
  -rw-r--r--   1 samuel  staff    71 24 Aug 15:57 README.markdown
  -rw-r--r--   1 samuel  staff    28 24 Aug 15:55 Rakefile
  -rw-r--r--   1 samuel  staff   757 24 Aug 16:04 basement.gemspec
  drwxr-xr-x   4 samuel  staff   136 24 Aug 15:55 lib
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;At this point an explanation about how Dired works. Dired creates a
ready only buffer and listing all the files from you&amp;rsquo;re choosen
directory.&lt;/p&gt;

&lt;p&gt;In the Dired buffer you able to move around with the usual
movements. Just the &lt;code&gt;next-line&lt;/code&gt; and &lt;code&gt;previous-line&lt;/code&gt; functions are
redefined. Generally when you use this functions, the cursor will be
positioned at the beginning of the line, but in the Dired buffer it
goes to the beginning of the file name.&lt;/p&gt;

&lt;p&gt;Next what you want to know is the &lt;code&gt;dired-goto-file&lt;/code&gt; functions, which
prompts for a filename in the minibuffer. It moves the cursor in the
Dired buffer to the file you choosed. Mostly you want to visit the
file of the current line, then you using &lt;code&gt;dired-find-file&lt;/code&gt; which
opens the file straight without prompting for filename input.&lt;/p&gt;

&lt;p&gt;Maybe you&amp;rsquo;re asking you&amp;rsquo;re self now, but whats about
subdirectories? You have seen how easily it is to navigate in a single
directory and visit specific files, maybe you found out that when you
use &lt;code&gt;dired-goto-file&lt;/code&gt; on a subdirectory it will list the files from
this directory. But you want a solution with a better overview,
something that gives you the parent and the subdirectory at once.
So let&amp;rsquo;s check out what Dired having for use.&lt;/p&gt;

&lt;p&gt;As you know, Dired just displays one directory at the time. But with
the &lt;code&gt;dired-maybe-insert-subdir&lt;/code&gt; function, Dired takes the directory
on the current line and listing the content of the directory below
the parent directory in the current Dired buffer.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s see how this looks like:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;  /Users/samuel/Projects/basement:
  total used in directory 48 available 151364824
  drwxr-xr-x  10 samuel  staff   340 24 Aug 16:16 .
  drwxr-xr-x  37 samuel  staff  1258  5 Okt 13:54 ..
  drwxr-xr-x  12 samuel  staff   408  5 Okt 22:29 .git
  -rw-r--r--   1 samuel  staff    33 24 Aug 15:55 .gitignore
  -rw-r--r--   1 samuel  staff    92 24 Aug 15:55 Gemfile
  -rw-r--r--   1 samuel  staff   194 24 Aug 16:16 Gemfile.lock
  -rw-r--r--   1 samuel  staff    71 24 Aug 15:57 README.markdown
  -rw-r--r--   1 samuel  staff    28 24 Aug 15:55 Rakefile
  -rw-r--r--   1 samuel  staff   757 24 Aug 16:04 basement.gemspec
  drwxr-xr-x   4 samuel  staff   136 24 Aug 15:55 lib

  /Users/samuel/Projects/basement/lib:
  total used in directory 8 available 151364824
  drwxr-xr-x   4 samuel  staff  136 24 Aug 15:55 .
  drwxr-xr-x  10 samuel  staff  340 24 Aug 16:16 ..
  drwxr-xr-x   3 samuel  staff  102 24 Aug 15:55 basement
  -rw-r--r--   1 samuel  staff   75 24 Aug 15:55 basement.rb
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;You see, the parent directory is on top and the subdirectory you jumped
too is listet below. It&amp;rsquo;s an easy and great overview. At this point
Dired gives you a few functions to move between the
directories. &lt;code&gt;dired-prev-subdir&lt;/code&gt; to move up in the directory tree and the
vice-versa function &lt;code&gt;dired-next-subdir&lt;/code&gt;. What I find usefull too, it&amp;rsquo;s
the function &lt;code&gt;dired-up-directory&lt;/code&gt; which runs Dired in the parent
directory. It looks in the current buffer for the parent directory or
in another buffer, or creates a new one if needed.&lt;/p&gt;

&lt;h3&gt;Some customization&lt;/h3&gt;

&lt;p&gt;The variable &lt;code&gt;dired-listing-switches&lt;/code&gt; contains the options which are
used when &lt;code&gt;ls&lt;/code&gt; is called. That means you could define how the command
&lt;code&gt;ls&lt;/code&gt; should be called when you open a new directory into Dired.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scheme&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dired-listing-switches&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;-lRS&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;-&lt;/code&gt; in the &lt;code&gt;dired-listing-switches&lt;/code&gt; variable is a must, or Dired
wont work. I also recommend to add the &lt;code&gt;l&lt;/code&gt; option to the variable as
by default, or just the single files and directory names would be
showed in the list. Just fire up the &lt;code&gt;ls&lt;/code&gt; man page if you want to see
all available options for &lt;code&gt;ls&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;Functions and default keybindings&lt;/h3&gt;

&lt;table class=&quot;function-list&quot;&gt;
    &lt;tr&gt;
        &lt;th class=&quot;functions&quot;&gt;Function&lt;/th&gt;
        &lt;th&gt;Keybinding&lt;/th&gt;
        &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;span class=&quot;code&quot;&gt;dired&lt;/span&gt;&lt;/td&gt;
        &lt;td&gt;&lt;span class=&quot;code&quot;&gt;C-x d&lt;/span&gt;&lt;/td&gt;
        &lt;td&gt;Enter Dired.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;span class=&quot;code&quot;&gt;dired-next-line&lt;/span&gt;&lt;/td&gt;
        &lt;td&gt;&lt;span class=&quot;code&quot;&gt;C-n / SPC / n&lt;/span&gt;&lt;/td&gt;
        &lt;td&gt;Move to the next line.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;span class=&quot;code&quot;&gt;dired-previous-line&lt;/span&gt;&lt;/td&gt;
        &lt;td&gt;&lt;span class=&quot;code&quot;&gt;C-p / p / DEL&lt;/span&gt;&lt;/td&gt;
        &lt;td&gt;Move to the previous line. (&lt;span class=&quot;code&quot;&gt;DEL&lt;/span&gt; also unflags.)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;span class=&quot;code&quot;&gt;dired-goto-file&lt;/span&gt;&lt;/td&gt;
        &lt;td&gt;&lt;span class=&quot;code&quot;&gt;j&lt;/span&gt;&lt;/td&gt;
        &lt;td&gt;Prompts for a filename and moves cursor to choosen file in
    the Dired buffer.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;span class=&quot;code&quot;&gt;dired-find-file&lt;/span&gt;&lt;/td&gt;
        &lt;td&gt;&lt;span class=&quot;code&quot;&gt;f / e / RET&lt;/span&gt;&lt;/td&gt;
        &lt;td&gt;Open the file on the current line.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;span class=&quot;code&quot;&gt;dired-next-subdir&lt;/span&gt;&lt;/td&gt;
        &lt;td&gt;&lt;span class=&quot;code&quot;&gt;C-M-n&lt;/span&gt;&lt;/td&gt;
        &lt;td&gt;Jumps to the next subdirectory.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;span class=&quot;code&quot;&gt;dired-prev-subdir&lt;/span&gt;&lt;/td&gt;
        &lt;td&gt;&lt;span class=&quot;code&quot;&gt;C-M-p&lt;/span&gt;&lt;/td&gt;
        &lt;td&gt;Jumps to the previus subdirectory.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;span class=&quot;code&quot;&gt;dired-prev-subdir&lt;/span&gt;&lt;/td&gt;
        &lt;td&gt;&lt;span class=&quot;code&quot;&gt;^&lt;/span&gt;&lt;/td&gt;
        &lt;td&gt;Run Dired on parent directory of current directory.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;span class=&quot;code&quot;&gt;dired-maybe-insert-subdir&lt;/span&gt;&lt;/td&gt;
        &lt;td&gt;&lt;span class=&quot;code&quot;&gt;i&lt;/span&gt;&lt;/td&gt;
        &lt;td&gt;Opens the content of the that directory in current Dired buffer.&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;


&lt;h3&gt;Summary&lt;/h3&gt;

&lt;p&gt;Dired have everything you need to navigate through your daily projects
and a lot more. I just scratched the surface and recommend the
official &lt;a href=&quot;http://www.gnu.org/s/libtool/manual/emacs/Dired.html#Dired&quot;&gt;Emacs Dired manual&lt;/a&gt;
for further informations.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Handle Ruby Versions</title>
      <link>http://emacsrookie.com/2011/10/01/handle-ruby-versions/</link>
      <pubDate>Sat, 01 Oct 2011 00:00:00 CEST</pubDate>
      <author>tonini.samuel@gmail.com (Samuel Tonini)</author>
      <guid>http://emacsrookie.com/2011/10/01/handle-ruby-versions</guid>
      <description>&lt;p&gt;&lt;a href=&quot;http://beginrescueend.com/&quot;&gt;RVM&lt;/a&gt; it&amp;rsquo;s an extremly usefull tool if you
have to work with Ruby, different Ruby projects and specific
Ruby Gemsets for your projects. RVM offers the solution for these
needs by creating environments bound to a specific Ruby version and a
set of Ruby Gems. This possibility avoids Gem version conflicts between
your projects and also makes it easy to create test environments.&lt;/p&gt;

&lt;p&gt;Now what we want is to bring this into our beloved Emacs. And here comes rvm.el
along, an Emacs package by &lt;a href=&quot;https://github.com/senny&quot;&gt;Yves Senn&lt;/a&gt;. The rvm.el package integrates
Emacs with RVM and gives us a few nifty functions.&lt;/p&gt;

&lt;p&gt;One of the great advantages which rvm.el brings is that packages like
&lt;code&gt;inf-ruby&lt;/code&gt; and &lt;code&gt;mode-compile&lt;/code&gt; automatically benefit from it and use the
precise Ruby version.&lt;/p&gt;

&lt;h3&gt;How to use it straightforward?&lt;/h3&gt;

&lt;p&gt;First you have to install rvm.el; you get the source on
&lt;a href=&quot;https://github.com/senny/rvm.el&quot;&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Then you need to put the rvm.el somewhere in your &lt;code&gt;load-path&lt;/code&gt;
and add the following to your &lt;code&gt;~/.emacs&lt;/code&gt; file.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scheme&quot;&gt;&lt;span class=&quot;c1&quot;&gt;;; Load rvm.el&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;rvm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;; use rvm’s default ruby for the current Emacs session&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rvm-use-default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Done, now you&amp;rsquo;re ready to use rvm.el.&lt;/p&gt;

&lt;p&gt;The first function you want to know is &lt;code&gt;rvm-activate-corresponding-ruby&lt;/code&gt;,
this interactive function activates the corresponding Ruby version for
the file in the current buffer. What the function does is, to search
for an &lt;a href=&quot;http://beginrescueend.com/workflow/rvmrc/&quot;&gt;.rvmrc&lt;/a&gt; file and activate the selected Ruby version. If there
is no &lt;code&gt;.rvmrc&lt;/code&gt; file, the default ruby will be used instead.&lt;/p&gt;

&lt;p&gt;Maybe you want to switch manually to a specific Ruby version, then you
could use the &lt;code&gt;rvm-use&lt;/code&gt; function, which is also as an interactive
function available.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re working with Ruby on a daily basis and have to rummage through
different Gem source code from time to time, then you will definitely
need the interactive &lt;code&gt;rvm-open-gem&lt;/code&gt; function. This function gives you a
list of all the Gems which are installed for the currently activated
Ruby version and shows them in the minibuffer. Now you just have to decide
which one to open.&lt;/p&gt;

&lt;p&gt;In addition to that, if you have &lt;a href=&quot;/2011/09/25/workspaces/&quot;&gt;Perspective&lt;/a&gt; installed, &lt;code&gt;rvm-open-gem&lt;/code&gt; will
open the chosen Gem directory in a new perspective, labeled with the
Gem&amp;rsquo;s name. Now it&amp;rsquo;s easy to switch back and forth between your project and
the Gem source.&lt;/p&gt;

&lt;h3&gt;More functions&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;rvm-autodetect-ruby&lt;/code&gt; will add a &lt;code&gt;ruby-mode-hook&lt;/code&gt; which will call
&lt;code&gt;rvm-activate-corresponding-ruby&lt;/code&gt; to detect the Ruby version.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rvm-autodetect-ruby-stop&lt;/code&gt; is the vice-versa function, it will remove
the &lt;code&gt;ruby-mode-hook&lt;/code&gt; which calls the &lt;code&gt;rvm-activate-corresponding-ruby&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rvm-use-default&lt;/code&gt; uses the rvm default configured Ruby as the
current Ruby version.&lt;/p&gt;

&lt;h3&gt;Some customization&lt;/h3&gt;

&lt;p&gt;You can use rvm.el in your own Emacs scripts easily. Here an
example how &lt;code&gt;rspec-mode&lt;/code&gt; uses it:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scheme&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;defcustom&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;rspec-use-rvm&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nil&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;t when RVM in is in use. (Requires rvm.el)&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;:type&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;boolean&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;:group&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;rspec-mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;And in the &lt;code&gt;rspec-compile&lt;/code&gt; function it uses the
&lt;code&gt;rvm-activate-corresponding-ruby&lt;/code&gt; before it runs the specs.&lt;/p&gt;

&lt;p&gt;The following example code is simplified.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scheme&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;rspec-compile&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;;; some code.....&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;rspec-use-rvm&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rvm-activate-corresponding-ruby&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;;; more code ..&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;h3&gt;Summary&lt;/h3&gt;

&lt;p&gt;Rvm.el is a great package and if you&amp;rsquo;re a Ruby programmer it
will make your daily adventures with Ruby a lot more exciting.&lt;/p&gt;

&lt;p&gt;The source code is available on the &lt;a href=&quot;https://github.com/senny/rvm.el&quot;&gt;rvm.el&lt;/a&gt; repository on Github.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Workspaces</title>
      <link>http://emacsrookie.com/2011/09/25/workspaces/</link>
      <pubDate>Sun, 25 Sep 2011 00:00:00 CEST</pubDate>
      <author>tonini.samuel@gmail.com (Samuel Tonini)</author>
      <guid>http://emacsrookie.com/2011/09/25/workspaces</guid>
      <description>&lt;p&gt;Perspective is an emacs package by &lt;a href=&quot;http://nex-3.com/&quot;&gt;Nathan Weizenbaum&lt;/a&gt;, which offers the
possibility of working with different workspaces. If you are used to a
windows manager (like Fluxbox, Gnome, KDE etc. for instance), you
know the advantages of switching between several desktops or setting up
different desktops for your purposes.&lt;/p&gt;

&lt;p&gt;In my daily grind I switch often between projects, fixing a bug
there or reading some source codes here. This possibility of working this way is extremely helpful.
It&amp;rsquo;s hard imagining not to be able to use it.&lt;/p&gt;

&lt;p&gt;Perspective gives you tagged workspaces and because each perspective
(workspace) is composed of a window configuration and a set of
buffers, switching to a perspective will only make the buffers
available which belong to it.&lt;/p&gt;

&lt;h3&gt;How to use it straight ahead?&lt;/h3&gt;

&lt;p&gt;First you have to install perspective, you get the source on
&lt;a href=&quot;http://github.com/nex3/perspective-el&quot;&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Then you need to put the perspective.el file somewhere in your &lt;code&gt;load-path&lt;/code&gt;
and add the following to your &lt;code&gt;~/.emacs&lt;/code&gt; file.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scheme&quot;&gt;&lt;span class=&quot;c1&quot;&gt;;; Load Perspective&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;perspective&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;; Toggle the perspective mode&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;persp-mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;From now on you are ready to go. Perspective is easy to use and you
will be familiar with its functionality in no time.&lt;/p&gt;

&lt;p&gt;What you will use mostly are &lt;code&gt;persp-switch&lt;/code&gt;. With this function you
switch to the perspective you want, if the specified perspective
doesn&amp;rsquo;t exist, it will create a new one and switch to it.&lt;/p&gt;

&lt;p&gt;Sometimes you need to rename a perspective and for this action use the function
 &lt;code&gt;persp-rename&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Another useful function is &lt;code&gt;persp-add-buffer&lt;/code&gt;, just
add a buffer to your chosen perspective. The vice-versa function of
it is &lt;code&gt;persp-remove-buffer&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;More functions&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;pesp-kill&lt;/code&gt; just kill a not anymore used perspective.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;persp-import&lt;/code&gt; import a perspective from another frame.&lt;/p&gt;

&lt;h3&gt;Some customization&lt;/h3&gt;

&lt;p&gt;Yves Senn, a friend of mine did a great job customizing
perspective. He defined a macro which takes two arguments : the &lt;code&gt;name&lt;/code&gt; for the
perspective and the &lt;code&gt;body&lt;/code&gt; which contains the code that will be evaluated after creating
the perspective. So what you can do now is to define your custom
function using the macro.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scheme&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;defmacro&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;custom-persp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&amp;amp;rest&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;not &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;gethash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;perspectives-hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;current-perspective&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;persp-curr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;persp-switch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;initialize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,@&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;persp-last&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;current-perspective&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;For instance, create a &lt;code&gt;@org&lt;/code&gt;
named perspective and open the first agenda file.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scheme&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;custom-persp/org&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;custom-persp&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;@org&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find-file&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;org-agenda-files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;At last, just create a key binding for the function.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scheme&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;global-set-key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C-p o&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;custom-persp/org&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;You find the whole source in the &lt;a href=&quot;https://github.com/senny/emacs-configs/blob/master/private/extensions/perspectives.el&quot;&gt;emacs-configs&lt;/a&gt; repository from Yves Senn.&lt;/p&gt;

&lt;h3&gt;Summary&lt;/h3&gt;

&lt;p&gt;Perspective is definitly a well written package&lt;/p&gt;

&lt;p&gt;I recommend reading through the Perspective source and make yourself
more familiar with whats going on beyond all these functions.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Do you remember?</title>
      <link>http://emacsrookie.com/2011/09/13/do-you-remember/</link>
      <pubDate>Tue, 13 Sep 2011 00:00:00 CEST</pubDate>
      <author>tonini.samuel@gmail.com (Samuel Tonini)</author>
      <guid>http://emacsrookie.com/2011/09/13/do-you-remember</guid>
      <description>&lt;p&gt;Remember is a mode for Emacs, to simpy remember data.
I&amp;rsquo;m a big fan of &lt;a href=&quot;http://orgmode.org/&quot;&gt;org-mode&lt;/a&gt;, but to create notes on the fly
without having to switch to my org file, I prefer Remember. Since
Emacs version 23.1 Remember is built in and it&amp;rsquo;s doing a good job
without any special configurations needed.&lt;/p&gt;

&lt;h3&gt;How to use straight ahead?&lt;/h3&gt;

&lt;p&gt;To jump in the note Remember buffer, simpy call the
&lt;code&gt;remember&lt;/code&gt; function. You will see an empty buffer if you are using it for the
first time and there is no &lt;code&gt;~/.notes&lt;/code&gt; file.
Below your current cursor position you will see the file path from
which you called the &lt;code&gt;remember&lt;/code&gt; function.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;# The cursor will be positioned above the file path
/path/to/your/file.rb
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Add your notes and after you&amp;rsquo;re finished, just call the &lt;code&gt;remember-finalize&lt;/code&gt; function,
or use the default key-binding &lt;code&gt;C-c C-c&lt;/code&gt;. By default the note will be
stored in &lt;code&gt;&amp;lt;your_home_directory&amp;gt;/.notes&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;** Mon Sep 12 16:02:03 2011 (Refactor)

Refactor

I should refactor some code smell in this file...

/path/to/your/file.rb
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Done. That&amp;rsquo;s it! That&amp;rsquo;s the easy way to use it without any magic
and store your notes on the fly.&lt;/p&gt;

&lt;h3&gt;More functions&lt;/h3&gt;

&lt;p&gt;There are a few other functions which are also very useful.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;remember-destroy&lt;/code&gt; just destroy the current Remember buffer you&amp;rsquo;re in.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;remember-region&lt;/code&gt; without opening the selected region in the Remember buffer &amp;ndash; it saves the text directly into your notes file.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;remember-clipboard&lt;/code&gt; writes your current clipboard contents to your notes file.&lt;/p&gt;

&lt;p&gt;I would recommend that you just inspect the source of Remember on your own to get
an overview of the full functionality.&lt;/p&gt;

&lt;h3&gt;Some customization&lt;/h3&gt;

&lt;p&gt;To change the file name in which you want to store your notes from
&lt;code&gt;.todos&lt;/code&gt; to &lt;code&gt;.notes&lt;/code&gt; just overwrite the &lt;code&gt;remember-data-file&lt;/code&gt; variable.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scheme&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;defcustom&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;remember-data-file&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;convert-standard-filename&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;~/.todos&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;The file in which to store unprocessed data.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;:type&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;file&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;:group&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;remember&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Or the leading text, which is used to begin each created note.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scheme&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;defcustom&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;remember-leader-text&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;** &amp;quot;&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;The text used to begin each remember item.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;:type&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;string&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;:group&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;remember&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;h3&gt;Further information&lt;/h3&gt;

&lt;p&gt;A lot of people use Remember with org-mode (&lt;a href=&quot;http://orgmode.org/org-remember.pdf&quot;&gt;org-remember&lt;/a&gt; documentation).
But since version 6.36, org-mode has its own Remember-like feature
implemented (see &lt;a href=&quot;http://orgmode.org/manual/Capture.html&quot;&gt;Capture&lt;/a&gt;),
If you&amp;rsquo;re using org-mode already, I would recommend to use that instead of Remember.&lt;/p&gt;

&lt;p&gt;In a further article I will show you how to use Capture, instead of Remember and how org-mode serves you some cool features with Capture.&lt;/p&gt;
</description>
    </item>
    

  </channel>
</rss>
